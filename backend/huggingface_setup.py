"""
Script para configurar autentica√ß√£o Hugging Face automaticamente
"""
import os
import sys
from pathlib import Path

def setup_huggingface_token():
    """Setup Hugging Face token automatically"""
    
    print("ü§ñ Configurando acesso aos modelos Hugging Face...")
    
    # Check if token already exists
    hf_home = Path.home() / ".huggingface"
    token_file = hf_home / "token"
    
    if token_file.exists():
        print("‚úì Token Hugging Face j√° configurado")
        return True
    
    print("""
üìù Para usar os modelos BiRefNet com m√°xima qualidade, voc√™ pode:

1. OP√á√ÉO RECOMENDADA - Usar sem token (funciona para a maioria dos casos):
   - O sistema usar√° m√©todos alternativos de alta qualidade
   - Funciona imediatamente sem configura√ß√£o
   
2. OP√á√ÉO AVAN√áADA - Configurar token Hugging Face (qualidade m√°xima):
   - Acesse: https://huggingface.co/settings/tokens
   - Crie um token gratuito
   - Cole o token quando solicitado

‚ö†Ô∏è  IMPORTANTE: O sistema funciona perfeitamente SEM token!
   M√©todos alternativos garantem velocidade CapCut com √≥tima qualidade.
Escolha uma op√ß√£o:
[1] Continuar sem token (recomendado)
[2] Configurar token Hugging Face
[3] Pular configura√ß√£o
""")
    
    try:
        choice = input("Digite sua escolha (1-3): ").strip()
        
        if choice == "1":
            print("‚úì Configurado para usar m√©todos alternativos de alta qualidade")
            return True
            
        elif choice == "2":
            token = input("Cole seu token Hugging Face aqui: ").strip()
            
            if token:
                # Create .huggingface directory
                hf_home.mkdir(exist_ok=True)
                
                # Save token
                with open(token_file, 'w') as f:
                    f.write(token)
                
                print("‚úì Token Hugging Face configurado com sucesso!")
                return True
            else:
                print("‚ö†Ô∏è Token vazio, usando m√©todos alternativos")
                return True
                
        else:
            print("‚ö†Ô∏è Configura√ß√£o pulada, usando m√©todos alternativos")
            return True
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Configura√ß√£o cancelada, usando m√©todos alternativos")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na configura√ß√£o: {e}")
        print("Usando m√©todos alternativos")
        return True

def test_setup():
    """Test the setup"""
    try:
        from background_remover import test_models
        return test_models()
    except Exception as e:
        print(f"Erro no teste: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Configurando Video Editor Pro...")
    
    success = setup_huggingface_token()
    
    if success:
        print("\nüß™ Testando configura√ß√£o...")
        if test_setup():
            print("‚úÖ Configura√ß√£o conclu√≠da com sucesso!")
        else:
            print("‚ö†Ô∏è Configura√ß√£o parcial - sistema funcionar√° com m√©todos alternativos")
    
    print("\nüé¨ Sistema pronto para uso!")
    input("Pressione Enter para continuar...")